import discord
from discord.ext import commands
import random
import asyncio
import os
from keep_alive import keep_alive
import json

# Configuration des intents (une seule fois)
intents = discord.Intents.default()
intents.message_content = True
intents.reactions = True
intents.members = True

#IDs des canaux et r√¥les
LOG_CHANNEL_ID = 1357111972486840472
LOG_TICKET_ID = 1357112024483631246
LOG_FLUX_ID = 1357125840982249644
LOG_JOIN_LEAVE_ID = 1357111972486840472  # ID du canal pour les logs d'arriv√©es/d√©parts
MUTE_ROLE_ID = 1357046834048139457
ADMIN_ROLE_ID = 1354899370335801484
ROLE_JOIN_ID = 1357113117561192478
GIVEAWAY_WINNER_ROLE_ID = 1357113189762076692
AUTO_ROLE_ID = 1354904148570542273
WELCOME_CHANNEL_ID = 1357046834874421496
GUILD_ID = 1354892680722911405 # ID du serveur

# Fichier pour stocker les IDs des canaux configurables
CONFIG_FILE = 'config.json'

# Fonction pour sauvegarder la configuration
def save_config():
    config = {
        'LOG_JOIN_LEAVE_ID': LOG_JOIN_LEAVE_ID
    }
    try:
        with open(CONFIG_FILE, 'w') as f:
            json.dump(config, f)
        return True
    except Exception as e:
        print(f"Erreur lors de la sauvegarde de la configuration: {e}")
        return False

# Fonction pour charger la configuration
def load_config():
    global LOG_JOIN_LEAVE_ID
    try:
        with open(CONFIG_FILE, 'r') as f:
            config = json.load(f)
            LOG_JOIN_LEAVE_ID = config.get('LOG_JOIN_LEAVE_ID', LOG_JOIN_LEAVE_ID)
        return True
    except FileNotFoundError:
        print("Fichier de configuration non trouv√©, utilisation des valeurs par d√©faut")
        return False
    except Exception as e:
        print(f"Erreur lors du chargement de la configuration: {e}")
        return False

# Charger la configuration au d√©marrage
load_config()



# L'√©v√©nement on_member_join sera d√©fini apr√®s la cr√©ation de l'instance bot





# Liste des mots interdits
MOTS_INTERDITS = [
    "fdp", "tg","pute","encul√©"
]

# Dictionnaire global pour les avertissements (un seul syst√®me)
warnings = {}

# Dictionnaire pour suivre les giveaways actifs
giveaways = {}

# Dictionnaire pour stocker les r√®glements
reglement = {
    "channel_id": None,  # ID du canal o√π afficher le r√®glement
    "message_id": None,  # ID du message de r√®glement
    "rules": [],         # Liste des r√®gles
    "banner_url": "hhttps://media.discordapp.net/attachments/1356391472869544138/1357094017006960790/glace.webp?ex=67eef3cb&is=67eda24b&hm=07365bbd9febea82e5cde3c098ce5c26f7f4b19830d18a91844a8476edfdbb14&=&format=webp&width=701&height=701"  # URL de la banni√®re du r√®glement
}

# Fonction pour sauvegarder le r√®glement dans un fichier JSON
def save_reglement():
    try:
        with open('reglement.json', 'w', encoding='utf-8') as f:
            json.dump(reglement, f, ensure_ascii=False, indent=4)
        print("R√®glement sauvegard√© avec succ√®s")
        return True
    except Exception as e:
        print(f"Erreur lors de la sauvegarde du r√®glement: {e}")
        return False

# Fonction pour charger le r√®glement depuis un fichier JSON
def load_reglement():
    global reglement
    try:
        with open('reglement.json', 'r', encoding='utf-8') as f:
            loaded_reglement = json.load(f)

            # S'assurer que toutes les cl√©s n√©cessaires existent
            default_reglement = {
                "channel_id": None,
                "message_id": None,
                "rules": [],
                "banner_url": "https://i.imgur.com/tJtAdNs.png"
            }

            # Ajouter les cl√©s manquantes du dictionnaire par d√©faut
            for key, value in default_reglement.items():
                if key not in loaded_reglement:
                    loaded_reglement[key] = value
                    print(f"Cl√© '{key}' ajout√©e au r√®glement avec la valeur par d√©faut")

            reglement = loaded_reglement
        print("R√®glement charg√© avec succ√®s")
        return True
    except FileNotFoundError:
        print("Fichier de r√®glement non trouv√©, utilisation des valeurs par d√©faut")
        return False
    except Exception as e:
        print(f"Erreur lors du chargement du r√®glement: {e}")
        return False

class PersistentViewBot(commands.Bot):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.persistent_views_added = False

bot = PersistentViewBot(command_prefix="!", intents=intents, case_insensitive=True)
tickets = {}

# Cette fonction a √©t√© fusionn√©e avec l'autre d√©finition de on_member_join plus bas dans le code
# Voir lignes ~860

# Fonction pour journaliser les actions
async def log_action(ctx, action, member, role=None, reason=None):
    log_channel = bot.get_channel(LOG_CHANNEL_ID)
    if log_channel:
        if role:
            await log_channel.send(f'**{action}** : {ctx.author.mention} a {action} le r√¥le {role.name} √† {member.mention}.')
        elif reason:
            await log_channel.send(f'**{action}** : {member.mention} ({member.id})\nüìå Raison : {reason}')
        else:
            await log_channel.send(f'**{action}** : {member.mention} ({member.id})')

# Classes pour les vues des tickets
class CloseTicketView(discord.ui.View):
    def __init__(self, creator_id=None):
        super().__init__(timeout=None)
        self.creator_id = creator_id

    @discord.ui.button(label="Fermer le ticket",
                      style=discord.ButtonStyle.danger,
                      custom_id="close_ticket_button")
    async def close_button(self, button, interaction):
        print(f"=== Bouton fermeture cliqu√© ===")
        print(f"Type du premier param√®tre: {type(button)}")
        print(f"Type du deuxi√®me param√®tre: {type(interaction)}")

        # D√©terminer quel param√®tre est l'interaction
        if isinstance(button, discord.Interaction):
            real_interaction = button
            print(f"L'interaction est le premier param√®tre")
        elif isinstance(interaction, discord.Interaction):
            real_interaction = interaction
            print(f"L'interaction est le deuxi√®me param√®tre")
        else:
            print(f"Aucun param√®tre n'est une interaction valide")
            return

        print(f"Utilisateur: {real_interaction.user.name if hasattr(real_interaction, 'user') and real_interaction.user else 'Non disponible'}")

        try:
            # V√©rifier si l'interaction a d√©j√† √©t√© r√©pondue
            if real_interaction.response.is_done():
                print("L'interaction a d√©j√† re√ßu une r√©ponse")
                return

            # V√©rifier si les attributs n√©cessaires sont pr√©sents
            if not hasattr(real_interaction, 'user') or not hasattr(real_interaction, 'channel') or not hasattr(real_interaction, 'guild'):
                print(f"Erreur: L'objet interaction n'a pas les attributs n√©cessaires dans close_button")
                return

            # V√©rifier si l'utilisateur a le droit de fermer le ticket
            channel_id = real_interaction.channel.id
            print(f"Canal: {real_interaction.channel.name} (ID: {channel_id})")

            # Si le ticket est dans notre dictionnaire, v√©rifier le cr√©ateur
            if channel_id in tickets:
                creator_id = tickets[channel_id]["creator_id"]
                print(f"Cr√©ateur du ticket: {tickets[channel_id]['creator_name']} (ID: {creator_id})")
                if real_interaction.user.id != creator_id and not real_interaction.user.guild_permissions.administrator:
                    print(f"Utilisateur non autoris√© √† fermer le ticket")
                    await real_interaction.response.send_message(
                        "‚ùå Tu n'es pas autoris√© √† fermer ce ticket.",
                        ephemeral=True)
                    return
            # Sinon, utiliser le creator_id de la classe ou v√©rifier les permissions d'admin
            elif self.creator_id is not None and real_interaction.user.id != self.creator_id and not real_interaction.user.guild_permissions.administrator:
                print(f"Utilisateur non autoris√© √† fermer le ticket (via creator_id de la classe)")
                await real_interaction.response.send_message(
                    "‚ùå Tu n'es pas autoris√© √† fermer ce ticket.",
                    ephemeral=True)
                return

            # Informer que le ticket va √™tre ferm√©
            print(f"Envoi du message de fermeture...")
            await real_interaction.response.send_message(
                "üîí Fermeture du ticket en cours...",
                ephemeral=True)

            # Supprimer le ticket du dictionnaire
            if channel_id in tickets:
                print(f"Suppression du ticket du dictionnaire")
                del tickets[channel_id]

            # Log de l'action
            print(f"Recherche du canal de logs...")
            log_channel = discord.utils.get(real_interaction.guild.text_channels, id=LOG_TICKET_ID)
            if log_channel:
                print(f"Envoi du message de log...")
                await log_channel.send(
                    f"üîí **Fermeture de ticket**\n**Utilisateur** : {real_interaction.user.mention} ({real_interaction.user.id})\n**Ticket ferm√©** : {real_interaction.channel.name}."
                )

            # Supprimer le canal
            print(f"Suppression du canal...")
            await real_interaction.channel.delete()
            print(f"Canal supprim√© avec succ√®s")

        except discord.errors.NotFound as e:
            print(f"Erreur NotFound lors de la fermeture du ticket: {e}")
            import traceback
            traceback.print_exc()
            # Le canal a peut-√™tre d√©j√† √©t√© supprim√©, pas besoin de r√©pondre

        except discord.errors.Forbidden as e:
            print(f"Erreur Forbidden lors de la fermeture du ticket: {e}")
            import traceback
            traceback.print_exc()
            try:
                if not real_interaction.response.is_done():
                    await real_interaction.response.send_message(
                        "‚ùå Je n'ai pas les permissions n√©cessaires pour fermer ce ticket. Contacte un admin !",
                        ephemeral=True)
            except Exception as inner_e:
                print(f"Erreur secondaire: {inner_e}")

        except Exception as e:
            print(f"Erreur lors de la fermeture du ticket: {e}")
            import traceback
            traceback.print_exc()
            try:
                if not real_interaction.response.is_done():
                    await real_interaction.response.send_message(
                        "‚ùå Une erreur s'est produite lors de la fermeture du ticket.",
                        ephemeral=True)
            except Exception as inner_e:
                print(f"Erreur secondaire: {inner_e}")

class TicketView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="üî∞ Candidature staff",
                      style=discord.ButtonStyle.primary,
                      custom_id="ticket_category_staff")
    async def ticket_button_staff(self, button, interaction):
        print(f"=== Bouton staff cliqu√© ===")
        print(f"Type du premier param√®tre: {type(button)}")
        print(f"Type du deuxi√®me param√®tre: {type(interaction)}")

        # D√©terminer quel param√®tre est l'interaction
        if isinstance(button, discord.Interaction):
            real_interaction = button
            print(f"L'interaction est le premier param√®tre")
        elif isinstance(interaction, discord.Interaction):
            real_interaction = interaction
            print(f"L'interaction est le deuxi√®me param√®tre")
        else:
            print(f"Aucun param√®tre n'est une interaction valide")
            return

        print(f"Utilisateur: {real_interaction.user.name if hasattr(real_interaction, 'user') and real_interaction.user else 'Non disponible'}")

        try:
            await self.create_ticket(real_interaction, "üìå Candidatures")
        except Exception as e:
            print(f"Erreur d√©taill√©e dans ticket_button_staff: {e}")
            import traceback
            traceback.print_exc()

    @discord.ui.button(label="üí° Besoin d'aide",
                      style=discord.ButtonStyle.primary,
                      custom_id="ticket_category_aide")
    async def ticket_button_aide(self, button, interaction):
        print(f"=== Bouton aide cliqu√© ===")
        print(f"Type du premier param√®tre: {type(button)}")
        print(f"Type du deuxi√®me param√®tre: {type(interaction)}")

        # D√©terminer quel param√®tre est l'interaction
        if isinstance(button, discord.Interaction):
            real_interaction = button
            print(f"L'interaction est le premier param√®tre")
        elif isinstance(interaction, discord.Interaction):
            real_interaction = interaction
            print(f"L'interaction est le deuxi√®me param√®tre")
        else:
            print(f"Aucun param√®tre n'est une interaction valide")
            return

        print(f"Utilisateur: {real_interaction.user.name if hasattr(real_interaction, 'user') and real_interaction.user else 'Non disponible'}")

        try:
            await self.create_ticket(real_interaction, "‚ùì Aide")
        except Exception as e:
            print(f"Erreur d√©taill√©e dans ticket_button_aide: {e}")
            import traceback
            traceback.print_exc()

    @discord.ui.button(label="üö´ Demande de deban",
                      style=discord.ButtonStyle.primary,
                      custom_id="ticket_category_deban")
    async def ticket_button_deban(self, button, interaction):
        print(f"=== Bouton deban cliqu√© ===")
        print(f"Type du premier param√®tre: {type(button)}")
        print(f"Type du deuxi√®me param√®tre: {type(interaction)}")

        # D√©terminer quel param√®tre est l'interaction
        if isinstance(button, discord.Interaction):
            real_interaction = button
            print(f"L'interaction est le premier param√®tre")
        elif isinstance(interaction, discord.Interaction):
            real_interaction = interaction
            print(f"L'interaction est le deuxi√®me param√®tre")
        else:
            print(f"Aucun param√®tre n'est une interaction valide")
            return

        print(f"Utilisateur: {real_interaction.user.name if hasattr(real_interaction, 'user') and real_interaction.user else 'Non disponible'}")

        try:
            await self.create_ticket(real_interaction, "üö´ D√©bannissement")
        except Exception as e:
            print(f"Erreur d√©taill√©e dans ticket_button_deban: {e}")
            import traceback
            traceback.print_exc()

    @discord.ui.button(label="ü§ù Candidature partenaire",
                      style=discord.ButtonStyle.primary,
                      custom_id="ticket_category_partner")
    async def ticket_button_partner(self, button, interaction):
        print(f"=== Bouton partenaire cliqu√© ===")
        print(f"Type du premier param√®tre: {type(button)}")
        print(f"Type du deuxi√®me param√®tre: {type(interaction)}")

        # D√©terminer quel param√®tre est l'interaction
        if isinstance(button, discord.Interaction):
            real_interaction = button
            print(f"L'interaction est le premier param√®tre")
        elif isinstance(interaction, discord.Interaction):
            real_interaction = interaction
            print(f"L'interaction est le deuxi√®me param√®tre")
        else:
            print(f"Aucun param√®tre n'est une interaction valide")
            return

        print(f"Utilisateur: {real_interaction.user.name if hasattr(real_interaction, 'user') and real_interaction.user else 'Non disponible'}")

        try:
            await self.create_ticket(real_interaction, "ü§ù Partenariats")
        except Exception as e:
            print(f"Erreur d√©taill√©e dans ticket_button_partner: {e}")
            import traceback
            traceback.print_exc()

    async def create_ticket(self, interaction, category_name: str):
        print(f"\n=== Cr√©ation de ticket demand√©e ===")
        print(f"Cat√©gorie: {category_name}")
        print(f"Type de l'interaction: {type(interaction)}")

        try:
            # V√©rifier si l'objet interaction est valide
            if not interaction:
                print(f"Erreur: L'objet interaction est None")
                return

            # V√©rifier si l'interaction a d√©j√† √©t√© r√©pondue
            try:
                is_done = interaction.response.is_done()
                print(f"L'interaction a d√©j√† re√ßu une r√©ponse: {is_done}")
                if is_done:
                    return
            except Exception as e:
                print(f"Erreur lors de la v√©rification de is_done(): {e}")
                return

            # V√©rifier si les attributs n√©cessaires sont pr√©sents
            if not hasattr(interaction, 'user'):
                print("L'interaction n'a pas d'attribut 'user'")
                return

            if not hasattr(interaction, 'guild'):
                print("L'interaction n'a pas d'attribut 'guild'")
                return

            user = interaction.user
            guild = interaction.guild

            print(f"Utilisateur: {user.name} (ID: {user.id})")
            print(f"Serveur: {guild.name} (ID: {guild.id})")

            if not user or not guild:
                print(f"Erreur: Utilisateur ou serveur non disponible")
                await interaction.response.send_message(
                    "‚ùå Une erreur s'est produite. R√©essaie plus tard.",
                    ephemeral=True)
                return

            # Rechercher la cat√©gorie
            print(f"Recherche de la cat√©gorie '{category_name}'...")
            category = discord.utils.get(guild.categories, name=category_name)
            if not category:
                print(f"‚ùå Cat√©gorie '{category_name}' non trouv√©e!")
                print(f"Cat√©gories disponibles: {[c.name for c in guild.categories]}")
                await interaction.response.send_message(
                    f"‚ùå La cat√©gorie `{category_name}` n'existe pas. Contacte un admin !",
                    ephemeral=True)
                return
            else:
                print(f"‚úÖ Cat√©gorie '{category_name}' trouv√©e (ID: {category.id})")

            # V√©rifier si l'utilisateur a d√©j√† un ticket dans cette cat√©gorie
            print("V√©rification des tickets existants...")
            existing_ticket = False
            for ticket_id, ticket_info in tickets.items():
                if ticket_info["creator_id"] == user.id and ticket_info["category"] == category_name:
                    existing_ticket = True
                    print(f"Ticket existant trouv√©: {ticket_info['channel_name']} (ID: {ticket_id})")
                    channel = guild.get_channel(ticket_id)
                    if channel:
                        print(f"Canal existant: {channel.name}")
                        await interaction.response.send_message(
                            f"‚ùå Tu as d√©j√† un ticket ouvert dans cette cat√©gorie: {channel.mention}",
                            ephemeral=True)
                    else:
                        print(f"Le canal n'existe plus, suppression de l'entr√©e du dictionnaire")
                        del tickets[ticket_id]
                        existing_ticket = False
                    break

            if existing_ticket:
                return

            # Cr√©er le ticket
            print(f"Cr√©ation du canal ticket-{user.name}...")
            ticket_name = f"ticket-{user.name}"
            try:
                ticket_channel = await guild.create_text_channel(ticket_name, category=category)
                print(f"‚úÖ Canal cr√©√©: {ticket_channel.name} (ID: {ticket_channel.id})")
            except Exception as e:
                print(f"‚ùå Erreur lors de la cr√©ation du canal: {e}")
                await interaction.response.send_message(
                    "‚ùå Je n'ai pas pu cr√©er le canal de ticket. V√©rifie mes permissions.",
                    ephemeral=True)
                return

            # Stocker les informations du ticket dans le dictionnaire global
            print("Ajout du ticket au dictionnaire...")
            tickets[ticket_channel.id] = {
                "creator_id": user.id,
                "creator_name": user.name,
                "channel_id": ticket_channel.id,
                "channel_name": ticket_channel.name,
                "category": category_name,
                "members": [user.id]
            }
            print(f"‚úÖ Ticket ajout√© au dictionnaire")

            # Configurer les permissions
            print("Configuration des permissions...")
            try:
                await ticket_channel.set_permissions(guild.default_role, read_messages=False)
                await ticket_channel.set_permissions(user, read_messages=True, send_messages=True)
                print(f"‚úÖ Permissions de base configur√©es")
            except Exception as e:
                print(f"‚ùå Erreur lors de la configuration des permissions: {e}")

            # Donner acc√®s aux administrateurs
            print(f"Recherche du r√¥le admin (ID: {ADMIN_ROLE_ID})...")
            admin_role = discord.utils.get(guild.roles, id=ADMIN_ROLE_ID)
            if admin_role:
                print(f"‚úÖ R√¥le admin trouv√©: {admin_role.name}")
                try:
                    await ticket_channel.set_permissions(admin_role, read_messages=True, send_messages=True)
                    print(f"‚úÖ Permissions admin configur√©es")
                except Exception as e:
                    print(f"‚ùå Erreur lors de la configuration des permissions admin: {e}")
            else:
                print(f"‚ùå R√¥le admin non trouv√©")

            # Envoyer un message dans le canal de logs
            print(f"Recherche du canal de logs (ID: {LOG_TICKET_ID})...")
            log_channel = discord.utils.get(guild.text_channels, id=LOG_TICKET_ID)
            if log_channel:
                print(f"‚úÖ Canal de logs trouv√©: {log_channel.name}")
                try:
                    await log_channel.send(
                        f"üîì **Ouverture de ticket**\n**Utilisateur** : {user.mention} ({user.id})\n**Ticket cr√©√©** : {ticket_channel.mention} dans la cat√©gorie `{category_name}`."
                    )
                    print(f"‚úÖ Message de log envoy√©")
                except Exception as e:
                    print(f"‚ùå Erreur lors de l'envoi du message de log: {e}")
            else:
                print(f"‚ùå Canal de logs non trouv√©")

            # Cr√©er une instance de la vue de fermeture avec l'ID du cr√©ateur
            print("Cr√©ation de la vue de fermeture...")
            close_view = CloseTicketView(user.id)

            # Envoyer un message dans le canal de ticket
            print("Envoi du message de bienvenue dans le ticket...")
            try:
                await ticket_channel.send(
                    f"üëã Salut {user.mention}, ton ticket a √©t√© cr√©√© dans la cat√©gorie `{category_name}`.\nUtilise le bouton ci-dessous pour fermer ce ticket une fois ton probl√®me r√©solu.",
                    view=close_view)
                print(f"‚úÖ Message de bienvenue envoy√©")
            except Exception as e:
                print(f"‚ùå Erreur lors de l'envoi du message de bienvenue: {e}")

            # R√©pondre √† l'interaction
            print("Envoi de la r√©ponse √† l'interaction...")
            try:
                await interaction.response.send_message(
                    f"‚úÖ Ton ticket a √©t√© cr√©√© : {ticket_channel.mention}",
                    ephemeral=True)
                print(f"‚úÖ R√©ponse √† l'interaction envoy√©e")
            except Exception as e:
                print(f"‚ùå Erreur lors de l'envoi de la r√©ponse √† l'interaction: {e}")

            print("=== Cr√©ation de ticket termin√©e avec succ√®s ===\n")

        except discord.errors.NotFound as e:
            print(f"Erreur NotFound lors de la cr√©ation du ticket: {e}")
            import traceback
            traceback.print_exc()
            try:
                if not interaction.response.is_done():
                    await interaction.response.send_message(
                        "‚ùå Une erreur s'est produite: ressource introuvable. Contacte un admin !",
                        ephemeral=True)
            except Exception as inner_e:
                print(f"Erreur secondaire: {inner_e}")

        except discord.errors.Forbidden as e:
            print(f"Erreur Forbidden lors de la cr√©ation du ticket: {e}")
            import traceback
            traceback.print_exc()
            try:
                if not interaction.response.is_done():
                    await interaction.response.send_message(
                        "‚ùå Je n'ai pas les permissions n√©cessaires pour cr√©er ce ticket. Contacte un admin !",
                        ephemeral=True)
            except Exception as inner_e:
                print(f"Erreur secondaire: {inner_e}")

        except Exception as e:
            print(f"Erreur lors de la cr√©ation du ticket: {e}")
            import traceback
            traceback.print_exc()
            try:
                if not interaction.response.is_done():
                    await interaction.response.send_message(
                        "‚ùå Une erreur s'est produite lors de la cr√©ation du ticket. Contacte un admin !",
                        ephemeral=True)
            except Exception as inner_e:
                print(f"Erreur secondaire: {inner_e}")

# Commandes pour renommer et g√©rer les membres des tickets
@bot.command(name="renameticket")
async def rename_ticket(ctx, *, nouveau_nom: str):
    """Renomme le ticket actuel."""
    # V√©rifier si le canal est un ticket
    if not ctx.channel.name.startswith("ticket-"):
        await ctx.send("‚ùå Cette commande ne peut √™tre utilis√©e que dans un canal de ticket.")
        return

    # V√©rifier si le ticket est dans notre dictionnaire
    if ctx.channel.id not in tickets:
        # Si le ticket n'est pas dans le dictionnaire, v√©rifier les permissions
        if not ctx.author.guild_permissions.manage_channels:
            await ctx.send("‚ùå Tu n'as pas la permission de renommer ce ticket.")
            return
    else:
        # Si le ticket est dans le dictionnaire, v√©rifier si l'utilisateur est le cr√©ateur ou un admin
        if ctx.author.id != tickets[ctx.channel.id]["creator_id"] and not ctx.author.guild_permissions.manage_channels:
            await ctx.send("‚ùå Tu n'as pas la permission de renommer ce ticket.")
            return

    # Renommer le canal
    try:
        await ctx.channel.edit(name=f"ticket-{nouveau_nom}")

        # Mettre √† jour le dictionnaire si le ticket y est
        if ctx.channel.id in tickets:
            tickets[ctx.channel.id]["channel_name"] = f"ticket-{nouveau_nom}"

        await ctx.send(f"‚úÖ Le ticket a √©t√© renomm√© en `ticket-{nouveau_nom}`.")

        # Log de l'action
        log_channel = discord.utils.get(ctx.guild.text_channels, id=LOG_TICKET_ID)
        if log_channel:
            await log_channel.send(
                f"üîÑ **Ticket renomm√©**\n**Utilisateur** : {ctx.author.mention} ({ctx.author.id})\n**Ticket** : {ctx.channel.mention}\n**Nouveau nom** : `ticket-{nouveau_nom}`"
            )
    except discord.Forbidden:
        await ctx.send("‚ùå Je n'ai pas la permission de renommer ce canal.")
    except discord.HTTPException as e:
        await ctx.send(f"‚ùå Une erreur s'est produite lors du renommage du canal : {e}")

@bot.command(name="addmember")
async def add_member(ctx, member: discord.Member):
    """Ajoute un membre au ticket actuel."""
    # V√©rifier si le canal est un ticket
    if not ctx.channel.name.startswith("ticket-"):
        await ctx.send("‚ùå Cette commande ne peut √™tre utilis√©e que dans un canal de ticket.")
        return

    # V√©rifier si le ticket est dans notre dictionnaire
    if ctx.channel.id not in tickets:
        # Si le ticket n'est pas dans le dictionnaire, v√©rifier les permissions
        if not ctx.author.guild_permissions.manage_channels:
            await ctx.send("‚ùå Tu n'as pas la permission d'ajouter des membres √† ce ticket.")
            return
    else:
        # Si le ticket est dans le dictionnaire, v√©rifier si l'utilisateur est le cr√©ateur ou un admin
        if ctx.author.id != tickets[ctx.channel.id]["creator_id"] and not ctx.author.guild_permissions.manage_channels:
            await ctx.send("‚ùå Tu n'as pas la permission d'ajouter des membres √† ce ticket.")
            return

    # Ajouter le membre au ticket
    try:
        await ctx.channel.set_permissions(member, read_messages=True, send_messages=True)

        # Mettre √† jour le dictionnaire si le ticket y est
        if ctx.channel.id in tickets and member.id not in tickets[ctx.channel.id]["members"]:
            tickets[ctx.channel.id]["members"].append(member.id)

        await ctx.send(f"‚úÖ {member.mention} a √©t√© ajout√© au ticket.")

        # Log de l'action
        log_channel = discord.utils.get(ctx.guild.text_channels, id=LOG_TICKET_ID)
        if log_channel:
            await log_channel.send(
                f"‚ûï **Membre ajout√© au ticket**\n**Utilisateur** : {ctx.author.mention} ({ctx.author.id})\n**Membre ajout√©** : {member.mention} ({member.id})\n**Ticket** : {ctx.channel.mention}"
            )
    except discord.Forbidden:
        await ctx.send("‚ùå Je n'ai pas la permission de modifier les permissions de ce canal.")
    except discord.HTTPException as e:
        await ctx.send(f"‚ùå Une erreur s'est produite lors de l'ajout du membre : {e}")

@bot.command(name="removemember")
async def remove_member(ctx, member: discord.Member):
    """Retire un membre du ticket actuel."""
    # V√©rifier si le canal est un ticket
    if not ctx.channel.name.startswith("ticket-"):
        await ctx.send("‚ùå Cette commande ne peut √™tre utilis√©e que dans un canal de ticket.")
        return

    # V√©rifier si le ticket est dans notre dictionnaire
    if ctx.channel.id not in tickets:
        # Si le ticket n'est pas dans le dictionnaire, v√©rifier les permissions
        if not ctx.author.guild_permissions.manage_channels:
            await ctx.send("‚ùå Tu n'as pas la permission de retirer des membres de ce ticket.")
            return
    else:
        # Si le ticket est dans le dictionnaire, v√©rifier si l'utilisateur est le cr√©ateur ou un admin
        if ctx.author.id != tickets[ctx.channel.id]["creator_id"] and not ctx.author.guild_permissions.manage_channels:
            await ctx.send("‚ùå Tu n'as pas la permission de retirer des membres de ce ticket.")
            return

        # V√©rifier que le membre n'est pas le cr√©ateur du ticket
        if member.id == tickets[ctx.channel.id]["creator_id"]:
            await ctx.send("‚ùå Tu ne peux pas retirer le cr√©ateur du ticket.")
            return

    # V√©rifier que le membre n'est pas un administrateur
    if member.guild_permissions.administrator and not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå Tu ne peux pas retirer un administrateur du ticket.")
        return

    # Retirer le membre du ticket
    try:
        await ctx.channel.set_permissions(member, overwrite=None)

        # Mettre √† jour le dictionnaire si le ticket y est
        if ctx.channel.id in tickets and member.id in tickets[ctx.channel.id]["members"]:
            tickets[ctx.channel.id]["members"].remove(member.id)

        await ctx.send(f"‚úÖ {member.mention} a √©t√© retir√© du ticket.")

        # Log de l'action
        log_channel = discord.utils.get(ctx.guild.text_channels, id=LOG_TICKET_ID)
        if log_channel:
            await log_channel.send(
                f"‚ûñ **Membre retir√© du ticket**\n**Utilisateur** : {ctx.author.mention} ({ctx.author.id})\n**Membre retir√©** : {member.mention} ({member.id})\n**Ticket** : {ctx.channel.mention}"
            )
    except discord.Forbidden:
        await ctx.send("‚ùå Je n'ai pas la permission de modifier les permissions de ce canal.")
    except discord.HTTPException as e:
        await ctx.send(f"‚ùå Une erreur s'est produite lors du retrait du membre : {e}")

@bot.command(name="listtickets")
async def list_tickets(ctx):
    """Liste tous les tickets actifs."""
    # V√©rifier les permissions
    if not ctx.author.guild_permissions.manage_channels:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return

    if not tickets:
        await ctx.send("üìù Aucun ticket actif pour le moment.")
        return

    # Cr√©er un embed pour afficher les tickets
    embed = discord.Embed(
        title="üìù Liste des tickets actifs",
        color=discord.Color.blue(),
        description=f"Il y a actuellement {len(tickets)} ticket(s) actif(s)."
    )

    for ticket_id, ticket_info in tickets.items():
        creator = ctx.guild.get_member(ticket_info["creator_id"])
        creator_name = creator.name if creator else ticket_info["creator_name"]

        # Obtenir les noms des membres
        members = []
        for member_id in ticket_info["members"]:
            member = ctx.guild.get_member(member_id)
            if member:
                members.append(member.name)

        members_str = ", ".join(members) if members else "Aucun"

        # Ajouter un champ pour ce ticket
        embed.add_field(
            name=f"üé´ {ticket_info['channel_name']}",
            value=f"**Cr√©ateur:** {creator_name}\n"
                  f"**Cat√©gorie:** {ticket_info['category']}\n"
                  f"**Membres:** {members_str}\n"
                  f"**Lien:** <#{ticket_id}>",
            inline=False
        )

    await ctx.send(embed=embed)

class Ticket:
    def __init__(self, id_ticket, nom, membres=None):
        self.id_ticket = id_ticket
        self.nom = nom
        self.membres = membres if membres else []

    def rename_ticket(self, nouveau_nom):
        """Renomme le ticket."""
        self.nom = nouveau_nom
        print(f"Le ticket {self.id_ticket} a √©t√© renomm√© en '{self.nom}'.")

    def ajouter_membre(self, membre):
        """Ajoute un membre au ticket."""
        if membre not in self.membres:
            self.membres.append(membre)
            print(f"{membre} a √©t√© ajout√© au ticket {self.id_ticket}.")
        else:
            print(f"{membre} est d√©j√† membre du ticket {self.id_ticket}.")

    def retirer_membre(self, membre):
        """Retire un membre du ticket."""
        if membre in self.membres:
            self.membres.remove(membre)
            print(f"{membre} a √©t√© retir√© du ticket {self.id_ticket}.")
        else:
            print(f"{membre} n'est pas membre du ticket {self.id_ticket}.")

# Exemple d'utilisation
ticket1 = Ticket(1, "Bug Interface", ["Alice", "Bob"])
ticket1.rename_ticket("Correction Interface")
ticket1.ajouter_membre("Charlie")
ticket1.retirer_membre("Alice")

# √âv√©nements du bot
@bot.event
async def on_ready():
    print(f"{bot.user.name} est connect√© !")

    # Afficher toutes les commandes enregistr√©es pour le d√©bogage
    commands_list = [command.name for command in bot.commands]
    print(f"Commandes enregistr√©es: {', '.join(commands_list)}")

    # Charger et mettre √† jour le r√®glement
    await update_reglement_on_startup()

    # V√©rifier les serveurs et leurs configurations
    for guild in bot.guilds:
        print(f"\n=== V√©rification du serveur: {guild.name} (ID: {guild.id}) ===")

        # V√©rifier les cat√©gories
        categories = ["üìå Candidatures", "‚ùì Aide", "üö´ D√©bannissement", "ü§ù Partenariats"]
        for cat_name in categories:
            category = discord.utils.get(guild.categories, name=cat_name)
            print(f"  Cat√©gorie '{cat_name}': {'‚úÖ Trouv√©e' if category else '‚ùå MANQUANTE'}")

        # V√©rifier les canaux importants
        log_channel = discord.utils.get(guild.text_channels, id=LOG_CHANNEL_ID)
        log_ticket = discord.utils.get(guild.text_channels, id=LOG_TICKET_ID)
        support_channel = discord.utils.get(guild.text_channels, name="ticket-support")

        print(f"  Canal de logs g√©n√©ral (ID: {LOG_CHANNEL_ID}): {'‚úÖ Trouv√©' if log_channel else '‚ùå MANQUANT'}")
        print(f"  Canal de logs tickets (ID: {LOG_TICKET_ID}): {'‚úÖ Trouv√©' if log_ticket else '‚ùå MANQUANT'}")
        print(f"  Canal ticket-support: {'‚úÖ Trouv√©' if support_channel else '‚ùå MANQUANT'}")

        # V√©rifier les r√¥les
        mute_role = discord.utils.get(guild.roles, id=MUTE_ROLE_ID)
        admin_role = discord.utils.get(guild.roles, id=ADMIN_ROLE_ID)
        join_role = discord.utils.get(guild.roles, id=ROLE_JOIN_ID)
        giveaway_role = discord.utils.get(guild.roles, id=GIVEAWAY_WINNER_ROLE_ID)

        print(f"  R√¥le mute (ID: {MUTE_ROLE_ID}): {'‚úÖ Trouv√©' if mute_role else '‚ùå MANQUANT'}")
        print(f"  R√¥le admin (ID: {ADMIN_ROLE_ID}): {'‚úÖ Trouv√©' if admin_role else '‚ùå MANQUANT'}")
        print(f"  R√¥le join (ID: {ROLE_JOIN_ID}): {'‚úÖ Trouv√©' if join_role else '‚ùå MANQUANT'}")
        print(f"  R√¥le giveaway (ID: {GIVEAWAY_WINNER_ROLE_ID}): {'‚úÖ Trouv√©' if giveaway_role else '‚ùå MANQUANT'}")

    if not bot.persistent_views_added:
        try:
            # Ajouter la vue des tickets
            print("Tentative d'ajout de la vue des tickets...")
            bot.add_view(TicketView())
            print("Vue des tickets ajout√©e avec succ√®s")

            # Ajouter une vue g√©n√©rique pour les boutons de fermeture
            # Utiliser None comme creator_id pour que les admins puissent toujours fermer
            print("Tentative d'ajout de la vue de fermeture de ticket...")
            bot.add_view(CloseTicketView(None))
            print("Vue de fermeture de ticket ajout√©e avec succ√®s")

            # Ajouter une vue g√©n√©rique pour les boutons de v√©rification par r√®glement
            print("Tentative d'ajout de la vue de v√©rification par r√®glement...")
            bot.add_view(ReglementVerificationView())
            print("Vue de v√©rification par r√®glement ajout√©e avec succ√®s")

            bot.persistent_views_added = True

            # V√©rifier si un message de r√®glement existe et le mettre √† jour
            try:
                # Mettre √† jour le message de r√®glement dans tous les serveurs
                for guild in bot.guilds:
                    await update_reglement_message(guild)
                    print(f"Message de r√®glement mis √† jour pour le serveur {guild.name}")
            except Exception as e:
                print(f"Erreur lors de la mise √† jour du message de r√®glement: {e}")
                import traceback
                traceback.print_exc()

        except Exception as e:
            print(f"Erreur d√©taill√©e lors de l'ajout des vues persistantes: {e}")
            import traceback
            traceback.print_exc()

        # Rechercher les canaux de ticket existants et les ajouter au dictionnaire
        print("\n=== Recherche des tickets existants ===")
        for guild in bot.guilds:
            print(f"Recherche dans le serveur: {guild.name}")
            for channel in guild.text_channels:
                if channel.name.startswith("ticket-"):
                    print(f"Canal de ticket trouv√©: {channel.name} (ID: {channel.id})")
                    # Essayer de trouver le cr√©ateur du ticket
                    creator_id = None
                    creator_name = "Inconnu"
                    members = []

                    # V√©rifier les permissions pour trouver le cr√©ateur et les membres
                    for target, permissions in channel.overwrites.items():
                        if isinstance(target, discord.Member) and permissions.read_messages:
                            if creator_id is None:
                                creator_id = target.id
                                creator_name = target.name
                                print(f"  Cr√©ateur probable: {creator_name} (ID: {creator_id})")
                            members.append(target.id)

                    # Ajouter le ticket au dictionnaire
                    if creator_id:
                        tickets[channel.id] = {
                            "creator_id": creator_id,
                            "creator_name": creator_name,
                            "channel_id": channel.id,
                            "channel_name": channel.name,
                            "category": channel.category.name if channel.category else "Sans cat√©gorie",
                            "members": members
                        }
                        print(f"  Ticket ajout√© au dictionnaire: {channel.name}")
                        print(f"  Membres: {len(members)}")
                    else:
                        print(f"  Aucun cr√©ateur trouv√© pour ce ticket, il ne sera pas ajout√©")

    # Rechercher les canaux de support pour les tickets
    print("\n=== Configuration des canaux de support ===")
    for guild in bot.guilds:
        print(f"Recherche du canal de support dans: {guild.name}")
        support_channel = discord.utils.get(guild.text_channels, name="ticket-support")
        if support_channel:
            print(f"Canal ticket-support trouv√©: {support_channel.name} (ID: {support_channel.id})")
            try:
                has_ticket_message = False
                print("Recherche des messages existants...")
                async for message in support_channel.history(limit=100):
                    if message.author == bot.user and "Choisis une cat√©gorie pour ton ticket" in message.content:
                        has_ticket_message = True
                        print(f"Message de ticket trouv√© (ID: {message.id})")
                        # S'assurer que la vue est attach√©e au message
                        try:
                            print(f"Tentative d'ajout de la vue au message existant...")
                            bot.add_view(TicketView(), message_id=message.id)
                            print(f"Vue ajout√©e avec succ√®s au message existant dans {guild.name}")
                        except Exception as e:
                            print(f"Erreur lors de l'ajout de la vue au message existant dans {guild.name}: {e}")
                            import traceback
                            traceback.print_exc()
                        break

                if not has_ticket_message:
                    print("Aucun message de ticket trouv√©, cr√©ation d'un nouveau message...")
                    try:
                        view = TicketView()
                        await support_channel.send(
                            "üìù **Choisis une cat√©gorie pour ton ticket :**", view=view)
                        print(f"Message de ticket cr√©√© avec succ√®s dans {guild.name}")
                    except Exception as e:
                        print(f"Erreur lors de la cr√©ation du message de ticket dans {guild.name}: {e}")
                        import traceback
                        traceback.print_exc()
            except Exception as e:
                print(f"Erreur lors de la recherche des messages de ticket dans {guild.name}: {e}")
                import traceback
                traceback.print_exc()
        else:
            print(f"‚ùå ATTENTION: Canal ticket-support non trouv√© dans {guild.name}")

    print("\n=== Initialisation termin√©e ===")
    print(f"Bot pr√™t √† l'emploi sur {len(bot.guilds)} serveurs")

@bot.event
async def on_member_join(member):
    """G√®re l'arriv√©e d'un nouveau membre : log de l'arriv√©e."""
    print(f"Nouvel utilisateur rejoint : {member.name} (ID: {member.id})")

    try:
        # Log de l'arriv√©e du membre dans le canal g√©n√©ral
        log_channel = bot.get_channel(LOG_FLUX_ID)
        if log_channel:
            welcome_channel = bot.get_channel(WELCOME_CHANNEL_ID)
            channel_mention = welcome_channel.mention if welcome_channel else "le canal de bienvenue"

            await log_channel.send(
                f"üì• **Nouveau membre** : {member.mention} ({member.id}) a rejoint le serveur. "
                f"L'utilisateur doit se rendre dans {channel_mention} pour se v√©rifier."
            )

        # Log de l'arriv√©e dans le canal d√©di√© aux arriv√©es/d√©parts
        join_leave_channel = bot.get_channel(LOG_JOIN_LEAVE_ID)
        if join_leave_channel:
            # Cr√©er un embed pour l'arriv√©e
            embed = discord.Embed(
                title="üì• Nouveau membre",
                description=f"{member.mention} a rejoint le serveur.",
                color=discord.Color.green(),
                timestamp=discord.utils.utcnow()
            )

            # Ajouter des informations sur l'utilisateur
            embed.add_field(name="ID", value=str(member.id), inline=True)
            embed.add_field(name="Nom", value=member.name, inline=True)

            # Ajouter la date de cr√©ation du compte
            created_at = member.created_at.strftime("%d/%m/%Y %H:%M:%S")
            embed.add_field(name="Compte cr√©√© le", value=created_at, inline=True)

            # Ajouter l'avatar de l'utilisateur
            if member.avatar:
                embed.set_thumbnail(url=member.avatar.url)

            # Ajouter un pied de page
            embed.set_footer(text=f"Membres: {member.guild.member_count}")

            await join_leave_channel.send(embed=embed)

    except Exception as e:
        print(f"Erreur lors du log de l'arriv√©e du membre : {e}")
        import traceback
        traceback.print_exc()

        # Log de l'erreur
        log_channel = bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            await log_channel.send(f"‚ö†Ô∏è **Erreur** : Impossible de logger l'arriv√©e de {member.mention}. Erreur: {str(e)}")

@bot.event
async def on_member_remove(member):
    """G√®re le d√©part d'un membre : log du d√©part."""
    print(f"Utilisateur parti : {member.name} (ID: {member.id})")

    try:
        # Log du d√©part dans le canal g√©n√©ral
        log_channel = bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            await log_channel.send(
                f"üì§ **Membre parti** : {member.mention} ({member.id}) a quitt√© le serveur."
            )

        # Log du d√©part dans le canal d√©di√© aux arriv√©es/d√©parts
        join_leave_channel = bot.get_channel(LOG_JOIN_LEAVE_ID)
        if join_leave_channel:
            # Cr√©er un embed pour le d√©part
            embed = discord.Embed(
                title="üì§ Membre parti",
                description=f"{member.mention} a quitt√© le serveur.",
                color=discord.Color.red(),
                timestamp=discord.utils.utcnow()
            )

            # Ajouter des informations sur l'utilisateur
            embed.add_field(name="ID", value=str(member.id), inline=True)
            embed.add_field(name="Nom", value=member.name, inline=True)

            # Calculer la dur√©e de pr√©sence sur le serveur
            joined_at = member.joined_at
            if joined_at:
                joined_str = joined_at.strftime("%d/%m/%Y %H:%M:%S")
                # Calculer la dur√©e en jours
                duration = (discord.utils.utcnow() - joined_at).days
                duration_str = f"{duration} jour(s)"
                embed.add_field(name="Pr√©sent depuis", value=f"{joined_str} ({duration_str})", inline=True)

            # Ajouter l'avatar de l'utilisateur
            if member.avatar:
                embed.set_thumbnail(url=member.avatar.url)

            # Ajouter un pied de page
            embed.set_footer(text=f"Membres restants: {member.guild.member_count}")

            await join_leave_channel.send(embed=embed)

    except Exception as e:
        print(f"Erreur lors du log du d√©part du membre : {e}")
        import traceback
        traceback.print_exc()

        # Log de l'erreur
        log_channel = bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            await log_channel.send(f"‚ö†Ô∏è **Erreur** : Impossible de logger le d√©part de {member.name} (ID: {member.id}). Erreur: {str(e)}")

@bot.event
async def on_reaction_add(reaction, user):
    if user == bot.user:
        return

    # V√©rifier si la r√©action est pour un giveaway
    for giveaway_id, giveaway_data in list(giveaways.items()):
        if reaction.message.id == giveaway_id and str(reaction.emoji) == "üéâ":
            giveaway_data["participants"].add(user)
            print(f"{user.name} a particip√© au giveaway.")

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    # V√©rifier si l'utilisateur est celui avec l'ID sp√©cifique
    if message.author.id == 1264702434433961994:
        await message.channel.send("Ta gueule")
        # On continue le traitement normal du message

       
    # V√©rifier si l'utilisateur a le r√¥le administrateur
    admin_role = discord.utils.get(message.author.roles, id=ADMIN_ROLE_ID)
    is_admin = admin_role is not None

    # V√©rification des mots interdits
    for mot in MOTS_INTERDITS:
        if mot in message.content.lower():
            # Supprimer le message pour tout le monde (y compris les admins)
            try:
                await message.delete()
            except discord.errors.NotFound:
                # Le message a d√©j√† √©t√© supprim√© ou n'existe plus
                print(f"Message introuvable lors de la tentative de suppression.")
                pass
            except discord.errors.Forbidden:
                # Le bot n'a pas la permission de supprimer le message
                print(f"Permission refus√©e lors de la tentative de suppression d'un message.")
                pass
            except Exception as e:
                # Autre erreur
                print(f"Erreur lors de la suppression du message: {e}")
                pass

            # Appliquer les avertissements seulement pour les non-administrateurs
            if not is_admin:
                if message.author.id not in warnings:
                    warnings[message.author.id] = 0

                warnings[message.author.id] += 1

                await message.channel.send(f"{message.author.mention}, attention ! Ce mot est interdit. Avertissement {warnings[message.author.id]}/3")

                if warnings[message.author.id] >= 3:
                    try:
                        await message.author.kick(reason="Trop d'avertissements pour langage inappropri√©.")
                        await message.channel.send(f"{message.author.mention} a √©t√© expuls√© pour non-respect des r√®gles.")
                    except discord.errors.Forbidden:
                        await message.channel.send(f"Je n'ai pas la permission d'expulser {message.author.mention}.")
                        print(f"Permission refus√©e lors de la tentative d'expulsion de {message.author.name}.")
                    except Exception as e:
                        print(f"Erreur lors de l'expulsion de {message.author.name}: {e}")

                # Ne pas traiter les commandes si un mot interdit a √©t√© d√©tect√© pour les non-admins
                return

            # Pour les admins, on continue le traitement des commandes apr√®s suppression du message
            break
    
    # Permettre le traitement des commandes
    await bot.process_commands(message)

# Commandes g√©n√©rales
@bot.command()
async def hello(ctx):
    role = discord.utils.get(ctx.author.roles, id=ADMIN_ROLE_ID)
    if role is None:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return
    await ctx.send(
        "Salut ! Je suis l√† pour t'aider. Utilise !commands pour voir toutes les commandes."
    )

@bot.command()
async def commands(ctx):
    """Affiche la liste de toutes les commandes disponibles."""
    # V√©rifier si l'utilisateur est administrateur
    role = discord.utils.get(ctx.author.roles, id=ADMIN_ROLE_ID)
    if role is None:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return

    # Cr√©er un embed pour afficher les commandes
    embed = discord.Embed(
        title="üìã Liste des commandes",
        description="Voici la liste des commandes disponibles sur ce serveur :",
        color=0x3498db
    )

    # Commandes g√©n√©rales
    general_commands = [
        "`!hello` - Le bot r√©pond avec un message sympa",
        "`!commands` - Affiche cette liste de commandes",
        "`!serverinfo` - Afficher les informations du serveur",
        "`!userinfo [@utilisateur]` - Afficher les informations d'un utilisateur",
        "`!avatar [@utilisateur]` - Afficher l'avatar d'un utilisateur",
        "`!checksetup` - V√©rifie si le serveur est correctement configur√©",
        "`!setjoinleavechannel [#canal]` - Configure le canal pour les logs d'arriv√©es et d√©parts"
    ]
    embed.add_field(name="üéâ G√©n√©ral", value="\n".join(general_commands), inline=False)

    # Commandes de mod√©ration
    mod_commands = [
        "`!ban @utilisateur [raison]` - Bannir un utilisateur",
        "`!unban ID_utilisateur` - D√©bannir un utilisateur",
        "`!kick @utilisateur [raison]` - Expulser un utilisateur",
        "`!mute @utilisateur [dur√©e] [raison]` - Rendre muet un utilisateur",
        "`!unmute @utilisateur` - Rendre la parole √† un utilisateur",
        "`!clear [nombre]` - Supprimer des messages",
        "`!warn @utilisateur [raison]` - Avertir un utilisateur",
        "`!warnings @utilisateur` - Voir les avertissements d'un utilisateur",
        "`!clearwarns @utilisateur` - Effacer les avertissements d'un utilisateur",
        "`!addword <mot>` - Ajouter un mot √† la liste des mots interdits",
        "`!removeword <mot>` - Retirer un mot de la liste des mots interdits",
        "`!listwords` - Afficher la liste des mots interdits"
    ]
    embed.add_field(name="üõ°Ô∏è Mod√©ration", value="\n".join(mod_commands), inline=False)

    # Commandes de r√¥les
    role_commands = [
        "`!addrole @utilisateur @r√¥le` - Ajouter un r√¥le √† un utilisateur",
        "`!removerole @utilisateur @r√¥le` - Retirer un r√¥le √† un utilisateur"
    ]
    embed.add_field(name="üè∑Ô∏è Gestion des r√¥les", value="\n".join(role_commands), inline=False)

    # Commandes de tickets
    ticket_commands = [
        "`!setuptickets` - Configurer le syst√®me de tickets",
        "`!resetticket` - Recr√©er le message de ticket dans le canal ticket-support",
        "`!ticket` - Cr√©e un message de cr√©ation de ticket",
        "`!renameticket <nouveau_nom>` - Renomme un ticket",
        "`!addmember @utilisateur` - Ajoute un membre au ticket",
        "`!removemember @utilisateur` - Retire un membre du ticket",
        "`!listtickets` - Affiche la liste des tickets actifs"
    ]
    embed.add_field(name="üé´ Syst√®me de tickets", value="\n".join(ticket_commands), inline=False)

    # Commandes de v√©rification par r√®glement
    verification_commands = [
        "`!showrules` - Afficher le r√®glement avec un bouton pour accepter et obtenir le r√¥le membre"
    ]
    embed.add_field(name="‚úÖ Syst√®me de v√©rification", value="\n".join(verification_commands), inline=False)

    # Note: Les commandes suivantes ne sont pas encore impl√©ment√©es ou sont en cours de d√©veloppement

    # Commandes de r√®glement
    reglement_commands = [
        "`!setupreglement [#canal]` - Configurer le canal de r√®glement",
        "`!addrule <texte>` - Ajouter une r√®gle au r√®glement",
        "`!removerule <num√©ro>` - Supprimer une r√®gle du r√®glement",
        "`!editrule <num√©ro> <texte>` - Modifier une r√®gle existante",
        "`!showrules` - Afficher la liste des r√®gles",
        "`!setbanner [url]` - Changer la banni√®re du r√®glement",
        "`!resetrules` - Supprimer toutes les r√®gles"
    ]
    embed.add_field(name="üìú R√®glement", value="\n".join(reglement_commands), inline=False)

    # Pied de page
    embed.set_footer(text=f"Demand√© par {ctx.author.name}", icon_url=ctx.author.avatar.url if ctx.author.avatar else None)

    # Envoyer l'embed
    await ctx.send(embed=embed)

@bot.command()
async def ticket(ctx):
    role = discord.utils.get(ctx.author.roles, id=ADMIN_ROLE_ID)
    if role is None:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return

    support_channel = discord.utils.get(ctx.guild.text_channels,
                                      name="ticket-support")
    if not support_channel:
        await ctx.send(
            "‚ùå Aucun canal 'ticket-support' trouv√©. Cr√©ez ce canal avant d'utiliser cette commande."
        )
        return

    view = TicketView()
    await support_channel.send("üìù **Choisis une cat√©gorie pour ton ticket :**",
                              view=view)
    await ctx.send(
        f"‚úÖ Message de cr√©ation de ticket ajout√© dans {support_channel.mention}"
    )

@bot.command()
async def giveaway(ctx, time: int, *, prize: str):
    role = discord.utils.get(ctx.author.roles, id=ADMIN_ROLE_ID)
    if role is None:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return

    # V√©rifier s'il y a d√©j√† un giveaway en cours
    if any(giveaways):
        await ctx.send("‚ùå Un giveaway est d√©j√† en cours !")
        return

    giveaway_msg = await ctx.send(f"üéâ **GIVEAWAY** üéâ\n"
                                  f"üèÜ Prix : {prize}\n"
                                  f"üïí Temps restant : {time} secondes.\n"
                                  f"R√©agis avec üéâ pour participer !")

    await giveaway_msg.add_reaction("üéâ")

    # Stocker les informations du giveaway avec l'ID du message comme cl√©
    giveaways[giveaway_msg.id] = {
        "prize": prize,
        "time": time,
        "message": giveaway_msg,
        "participants": set()
    }

    # Compte √† rebours du giveaway
    remaining_time = time
    while remaining_time > 0:
        remaining_time -= 1
        await asyncio.sleep(1)
        if remaining_time % 10 == 0 or remaining_time <= 5:
            await giveaway_msg.edit(content=f"üéâ **GIVEAWAY** üéâ\n"
                                    f"üèÜ Prix : {prize}\n"
                                    f"üïí Temps restant : {remaining_time} secondes.\n"
                                    f"R√©agis avec üéâ pour participer !")

    # V√©rifier s'il y a des participants et choisir un gagnant
    current_giveaway = giveaways.get(giveaway_msg.id)
    if current_giveaway and current_giveaway["participants"]:
        winner = random.choice(list(current_giveaway["participants"]))
        await giveaway_msg.edit(
            content=f"üéâ **GIVEAWAY TERMIN√â !** üéâ\n"
            f"üèÜ **Le gagnant est {winner.mention} !** üéä\n    "
            f"üéÅ Prix remport√© : {prize}")

        # Ajout et retrait de r√¥les au gagnant
        role_to_remove = discord.utils.get(winner.guild.roles,
                                         id=ROLE_JOIN_ID)
        role_to_add = discord.utils.get(winner.guild.roles,
                                      id=GIVEAWAY_WINNER_ROLE_ID)

        if role_to_remove and role_to_add:
            try:
                # V√©rifier si le r√¥le du bot est plus haut dans la hi√©rarchie
                bot_member = winner.guild.get_member(bot.user.id)
                bot_top_role = bot_member.top_role

                if bot_top_role.position <= role_to_remove.position or bot_top_role.position <= role_to_add.position:
                    error_msg = f"Erreur : Le r√¥le du bot ({bot_top_role.name}) est plus bas que les r√¥les √† modifier."
                    print(error_msg)
                    await ctx.send(f"‚ö†Ô∏è **Erreur de permission** : {error_msg}")
                    return

                await winner.remove_roles(role_to_remove)
                await winner.add_roles(role_to_add)
                print(
                    f"Le r√¥le {role_to_remove.name} a √©t√© retir√© et {role_to_add.name} ajout√© √† {winner.name}."
                )
                await ctx.send(f"üèÜ Les r√¥les de {winner.mention} ont √©t√© mis √† jour !")
            except discord.Forbidden:
                error_msg = f"Erreur : Le bot n'a pas la permission de modifier les r√¥les de {winner.name}."
                print(error_msg)
                await ctx.send(f"‚ö†Ô∏è **Erreur de permission** : {error_msg} V√©rifiez que le bot a la permission 'G√©rer les r√¥les'.")
            except Exception as e:
                error_msg = f"Erreur inconnue lors de la modification des r√¥les : {e}"
                print(error_msg)
                await ctx.send(f"‚ö†Ô∏è **Erreur** : {error_msg}")
    else:
        await giveaway_msg.edit(
            content=f"üéâ **GIVEAWAY TERMIN√â !** üéâ\n"
            f"Aucun participant pour le giveaway de **{prize}**.\n"
            f"Le giveaway est annul√©.")

    # Supprimer les informations du giveaway
    if giveaway_msg.id in giveaways:
        del giveaways[giveaway_msg.id]


# Commandes de mod√©ration
@bot.command()
async def mute(ctx,
              member: discord.Member,
              time: int = None,
              *,
              reason: str = "Aucune raison sp√©cifi√©e"):
    """Mute un utilisateur et lui attribue le r√¥le mute."""
    # V√©rifier si le membre a le r√¥le administrateur
    admin_role = discord.utils.get(member.guild.roles, id=ADMIN_ROLE_ID)
    if admin_role in member.roles:
        await ctx.send("‚ùå Tu ne peux pas mute un administrateur.")
        return

    if not ctx.author.guild_permissions.manage_roles:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return
                  
    mute_role = discord.utils.get(ctx.guild.roles, id=MUTE_ROLE_ID)
    if not mute_role:
        await ctx.send("‚ùå Le r√¥le mute est introuvable.")
        return

    await member.add_roles(mute_role, reason=reason)
    await ctx.send(f"üîá {member.mention} a √©t√© mute. Raison : {reason}")

    # Log de l'action
    await log_action(ctx, "Mute", member, reason=f"{reason} | Temps: {'Infini' if time is None else f'{time} minutes'}")

    # Si un temps est donn√©, unmute apr√®s expiration
    if time:
        await asyncio.sleep(time * 60)
        if mute_role in member.roles:  # V√©rifier si le membre a toujours le r√¥le mute
            await member.remove_roles(mute_role, reason="Fin du mute")
            await ctx.send(f"üîä {member.mention} a √©t√© unmute.")
            await log_action(ctx, "Unmute automatique", member)

@bot.command()
async def unmute(ctx, member: discord.Member):
    """Unmute un utilisateur et lui retire le r√¥le mute."""
    # V√©rifier si le membre a le r√¥le administrateur
    admin_role = discord.utils.get(member.guild.roles, id=ADMIN_ROLE_ID)
    if admin_role in member.roles:
        await ctx.send("‚ùå Tu ne peux pas unmute un administrateur.")
        return

    if not ctx.author.guild_permissions.manage_roles:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return

    mute_role = discord.utils.get(ctx.guild.roles, id=MUTE_ROLE_ID)
    if not mute_role:
        await ctx.send("‚ùå Le r√¥le mute est introuvable.")
        return

    if mute_role not in member.roles:
        await ctx.send(f"‚ùå {member.mention} n'est pas mute.")
        return

    await member.remove_roles(mute_role, reason="Unmute manuel")
    await ctx.send(f"üîä {member.mention} a √©t√© unmute.")
    await log_action(ctx, "Unmute manuel", member)

@bot.command()
async def kick(ctx,
              member: discord.Member,
              *,
              reason: str = "Aucune raison sp√©cifi√©e"):
    """Expulse un utilisateur du serveur."""
    # V√©rifier si le membre a le r√¥le administrateur
    admin_role = discord.utils.get(member.guild.roles, id=ADMIN_ROLE_ID)
    if admin_role in member.roles:
        await ctx.send("‚ùå Tu ne peux pas expulser un administrateur.")
        return

    if not ctx.author.guild_permissions.kick_members:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return

    await member.kick(reason=reason)
    await ctx.send(f"üë¢ {member.mention} a √©t√© expuls√©. Raison : {reason}")
    await log_action(ctx, "Kick", member, reason=reason)

@bot.command()
async def ban(ctx,
             member: discord.Member,
             *,
             reason: str = "Aucune raison sp√©cifi√©e"):
    """Bannit un utilisateur du serveur."""
    # V√©rifier si le membre a le r√¥le administrateur
    admin_role = discord.utils.get(member.guild.roles, id=ADMIN_ROLE_ID)
    if admin_role in member.roles:
        await ctx.send("‚ùå Tu ne peux pas bannir un administrateur.")
        return

    if not ctx.author.guild_permissions.ban_members:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return

    await member.ban(reason=reason)
    await ctx.send(f"üö´ {member.mention} a √©t√© banni. Raison : {reason}")
    await log_action(ctx, "Ban", member, reason=reason)

@bot.command()
async def unban(ctx,
               member: discord.User,
               *,
               reason: str = "Aucune raison sp√©cifi√©e"):
    """D√©bannit un utilisateur du serveur."""
    if not ctx.author.guild_permissions.ban_members:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return

    # V√©rifier si l'utilisateur est banni
    try:
        ban_entry = await ctx.guild.fetch_ban(member)
    except discord.NotFound:
        await ctx.send(f"‚ùå {member.name} n'est pas banni.")
        return

    await ctx.guild.unban(member, reason=reason)
    await ctx.send(f"‚úÖ {member.mention} a √©t√© d√©banni. Raison : {reason}")
    await log_action(ctx, "Unban", member, reason=reason)

@bot.command()
async def warn(ctx,
              member: discord.Member,
              *,
              reason: str = "Aucune raison sp√©cifi√©e"):
    """Ajoute un avertissement √† un utilisateur."""
    # V√©rifier si le membre a le r√¥le administrateur
    admin_role = discord.utils.get(member.guild.roles, id=ADMIN_ROLE_ID)
    if admin_role in member.roles:
        await ctx.send("‚ùå Tu ne peux pas avertir un administrateur.")
        return

    if not ctx.author.guild_permissions.manage_roles:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return

    # Initialiser les avertissements si n√©cessaire
    if member.id not in warnings:
        warnings[member.id] = 0

    warnings[member.id] += 1

    await ctx.send(f"‚ö†Ô∏è {member.mention} a √©t√© averti. Raison : {reason}\n"
                   f"Avertissements actuels : {warnings[member.id]}")

    await log_action(ctx, "Avertissement", member,
                   reason=f"{reason} | Total: {warnings[member.id]}")

    # Action en fonction du nombre d'avertissements
    if warnings[member.id] >= 3:
        await member.kick(reason="Nombre d'avertissements trop √©lev√©.")
        await ctx.send(
            f"‚ùå {member.mention} a √©t√© kick√© pour avoir atteint 3 avertissements."
        )
        await log_action(ctx, "Kick automatique", member,
               reason=f"A atteint {warnings[member.id]} avertissements")
        warnings[member.id] = 0


# Commandes de gestion des r√¥les
@bot.command()
async def addrole(ctx, member: discord.Member, role: discord.Role):
    """Ajoute un r√¥le √† un utilisateur."""
    if not ctx.author.guild_permissions.manage_roles:
        await ctx.send("‚ùå Vous n'avez pas la permission de g√©rer les r√¥les.")
        return

    if role in member.roles:
        await ctx.send(f'{member.mention} a d√©j√† le r√¥le {role.name}.')
        return

    try:
        # V√©rifier si le r√¥le du bot est plus haut dans la hi√©rarchie
        bot_member = ctx.guild.get_member(bot.user.id)
        bot_top_role = bot_member.top_role

        if bot_top_role.position <= role.position:
            await ctx.send(f"‚ö†Ô∏è **Erreur de permission** : Le r√¥le du bot ({bot_top_role.name}) est plus bas que le r√¥le √† attribuer ({role.name}).")
            return

        await member.add_roles(role)
        await ctx.send(f'‚úÖ Le r√¥le {role.name} a √©t√© ajout√© √† {member.mention}.')
        await log_action(ctx, "ajout√©", member, role)
    except discord.Forbidden:
        await ctx.send(f"‚ö†Ô∏è **Erreur de permission** : Le bot n'a pas la permission d'attribuer le r√¥le {role.name}. V√©rifiez que le bot a la permission 'G√©rer les r√¥les'.")
    except Exception as e:
        await ctx.send(f"‚ö†Ô∏è **Erreur** : Impossible d'attribuer le r√¥le. Erreur: {str(e)}")

@bot.command()
async def removerole(ctx, member: discord.Member, role: discord.Role):
    """Retire un r√¥le √† un utilisateur."""
    if not ctx.author.guild_permissions.manage_roles:
        await ctx.send("‚ùå Vous n'avez pas la permission de g√©rer les r√¥les.")
        return

    if not role in member.roles:
        await ctx.send(f'{member.mention} n\'a pas le r√¥le {role.name}.')
        return

    try:
        # V√©rifier si le r√¥le du bot est plus haut dans la hi√©rarchie
        bot_member = ctx.guild.get_member(bot.user.id)
        bot_top_role = bot_member.top_role

        if bot_top_role.position <= role.position:
            await ctx.send(f"‚ö†Ô∏è **Erreur de permission** : Le r√¥le du bot ({bot_top_role.name}) est plus bas que le r√¥le √† retirer ({role.name}).")
            return

        await member.remove_roles(role)
        await ctx.send(f'‚úÖ Le r√¥le {role.name} a √©t√© retir√© √† {member.mention}.')
        await log_action(ctx, "retir√©", member, role)
    except discord.Forbidden:
        await ctx.send(f"‚ö†Ô∏è **Erreur de permission** : Le bot n'a pas la permission de retirer le r√¥le {role.name}. V√©rifiez que le bot a la permission 'G√©rer les r√¥les'.")
    except Exception as e:
        await ctx.send(f"‚ö†Ô∏è **Erreur** : Impossible de retirer le r√¥le. Erreur: {str(e)}")

# Commandes de gestion des mots interdits
@bot.command()
async def addword(ctx, *, word: str):
    """Ajoute un mot √† la liste des mots interdits."""
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return

    if word.lower() not in MOTS_INTERDITS:
        MOTS_INTERDITS.append(word.lower())
        await ctx.send(f"Le mot `{word}` a √©t√© ajout√© √† la liste des interdictions.")
    else:
        await ctx.send(f"Le mot `{word}` est d√©j√† dans la liste.")

@bot.command()
async def removeword(ctx, *, word: str):
    """Retire un mot de la liste des mots interdits."""
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return

    if word.lower() in MOTS_INTERDITS:
        MOTS_INTERDITS.remove(word.lower())
        await ctx.send(f"Le mot `{word}` a √©t√© retir√© de la liste des interdictions.")
    else:
        await ctx.send(f"Le mot `{word}` n'est pas dans la liste.")

@bot.command()
async def listwords(ctx):
    """Affiche la liste des mots interdits."""
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return
        
    await ctx.send(f"Liste des mots interdits: {', '.join(MOTS_INTERDITS)}")

# Commande de diagnostic
@bot.command(name="setjoinleavechannel")
async def set_join_leave_channel(ctx, channel: discord.TextChannel = None):
    """Configure le canal pour les logs d'arriv√©es et d√©parts.

    Utilisation:
    !setjoinleavechannel - Utilise le canal actuel
    !setjoinleavechannel #canal - Utilise le canal sp√©cifi√©
    """
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return

    # Si aucun canal n'est sp√©cifi√©, utiliser le canal actuel
    if not channel:
        channel = ctx.channel

    # Mettre √† jour l'ID du canal
    global LOG_JOIN_LEAVE_ID
    LOG_JOIN_LEAVE_ID = channel.id

    # Sauvegarder la configuration
    if save_config():
        await ctx.send(f"‚úÖ Le canal pour les logs d'arriv√©es et d√©parts a √©t√© configur√© sur {channel.mention}.")
    else:
        await ctx.send(f"‚úÖ Le canal pour les logs d'arriv√©es et d√©parts a √©t√© configur√© sur {channel.mention}, mais la sauvegarde de la configuration a √©chou√©.")

    # Envoyer un message de test
    embed = discord.Embed(
        title="‚úÖ Configuration des logs d'arriv√©es/d√©parts",
        description="Ce canal a √©t√© configur√© pour recevoir les logs d'arriv√©es et d√©parts des membres.",
        color=discord.Color.blue(),
        timestamp=discord.utils.utcnow()
    )
    embed.set_footer(text=f"Configur√© par {ctx.author.name}")

    await channel.send(embed=embed)

@bot.command(name="checksetup")
async def check_setup(ctx):
    """V√©rifie si le serveur est correctement configur√© pour le bot."""
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return

    embed = discord.Embed(
        title="üìã V√©rification de la configuration",
        color=discord.Color.blue(),
        description=f"Serveur: {ctx.guild.name} (ID: {ctx.guild.id})"
    )

    # V√©rifier les canaux de logs
    log_channel = discord.utils.get(ctx.guild.text_channels, id=LOG_CHANNEL_ID)
    log_ticket = discord.utils.get(ctx.guild.text_channels, id=LOG_TICKET_ID)
    log_join_leave = discord.utils.get(ctx.guild.text_channels, id=LOG_JOIN_LEAVE_ID)
    embed.add_field(
        name="üìù Canaux de logs",
        value=f"Canal de logs g√©n√©ral (ID: {LOG_CHANNEL_ID}): {'‚úÖ' if log_channel else '‚ùå'}\n"
              f"Canal de logs tickets (ID: {LOG_TICKET_ID}): {'‚úÖ' if log_ticket else '‚ùå'}\n"
              f"Canal de logs arriv√©es/d√©parts (ID: {LOG_JOIN_LEAVE_ID}): {'‚úÖ' if log_join_leave else '‚ùå'}",
        inline=False
    )

    # V√©rifier les r√¥les
    mute_role = discord.utils.get(ctx.guild.roles, id=MUTE_ROLE_ID)
    admin_role = discord.utils.get(ctx.guild.roles, id=ADMIN_ROLE_ID)
    join_role = discord.utils.get(ctx.guild.roles, id=ROLE_JOIN_ID)
    giveaway_role = discord.utils.get(ctx.guild.roles, id=GIVEAWAY_WINNER_ROLE_ID)
    embed.add_field(
        name="üëë R√¥les",
        value=f"R√¥le mute (ID: {MUTE_ROLE_ID}): {'‚úÖ' if mute_role else '‚ùå'}\n"
              f"R√¥le admin (ID: {ADMIN_ROLE_ID}): {'‚úÖ' if admin_role else '‚ùå'}\n"
              f"R√¥le join (ID: {ROLE_JOIN_ID}): {'‚úÖ' if join_role else '‚ùå'}\n"
              f"R√¥le giveaway (ID: {GIVEAWAY_WINNER_ROLE_ID}): {'‚úÖ' if giveaway_role else '‚ùå'}",
        inline=False
    )

    # V√©rifier les cat√©gories
    categories = ["üìå Candidatures", "‚ùì Aide", "üö´ D√©bannissement", "ü§ù Partenariats"]
    categories_status = []
    for cat_name in categories:
        category = discord.utils.get(ctx.guild.categories, name=cat_name)
        categories_status.append(f"{cat_name}: {'‚úÖ' if category else '‚ùå'}")

    embed.add_field(
        name="üìÇ Cat√©gories",
        value="\n".join(categories_status),
        inline=False
    )

    # V√©rifier le canal de support
    support_channel = discord.utils.get(ctx.guild.text_channels, name="ticket-support")
    embed.add_field(
        name="üé´ Canal de support",
        value=f"ticket-support: {'‚úÖ' if support_channel else '‚ùå'}",
        inline=False
    )

    # V√©rifier les permissions du bot
    bot_member = ctx.guild.get_member(bot.user.id)
    permissions = []
    required_perms = {
        "manage_channels": "G√©rer les canaux",
        "manage_roles": "G√©rer les r√¥les",
        "manage_messages": "G√©rer les messages",
        "read_messages": "Lire les messages",
        "send_messages": "Envoyer des messages"
    }

    for perm, name in required_perms.items():
        has_perm = getattr(bot_member.guild_permissions, perm)
        permissions.append(f"{name}: {'‚úÖ' if has_perm else '‚ùå'}")

    embed.add_field(
        name="üîë Permissions du bot",
        value="\n".join(permissions),
        inline=False
    )

    await ctx.send(embed=embed)

# Commande pour recr√©er le message de ticket
@bot.command(name="resetticket")
async def reset_ticket(ctx):
    """Supprime et recr√©e le message de ticket dans le canal ticket-support."""
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return

    support_channel = discord.utils.get(ctx.guild.text_channels, name="ticket-support")
    if not support_channel:
        await ctx.send("‚ùå Le canal ticket-support n'existe pas. Cr√©e-le d'abord.")
        return

    # Supprimer les anciens messages du bot
    deleted = 0
    async for message in support_channel.history(limit=100):
        if message.author == bot.user and "Choisis une cat√©gorie pour ton ticket" in message.content:
            await message.delete()
            deleted += 1

    # Cr√©er un nouveau message
    view = TicketView()
    await support_channel.send("üìù **Choisis une cat√©gorie pour ton ticket :**", view=view)

    await ctx.send(f"‚úÖ {deleted} ancien(s) message(s) supprim√©(s) et un nouveau message de ticket cr√©√© dans {support_channel.mention}")

# Commande pour cr√©er les cat√©gories manquantes
@bot.command(name="setuptickets")
async def setup_tickets(ctx):
    """Cr√©e les cat√©gories et canaux n√©cessaires pour le syst√®me de tickets."""
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return

    # Cr√©er les cat√©gories si elles n'existent pas
    categories = ["üìå Candidatures", "‚ùì Aide", "üö´ D√©bannissement", "ü§ù Partenariats"]
    created_categories = []

    for cat_name in categories:
        category = discord.utils.get(ctx.guild.categories, name=cat_name)
        if not category:
            try:
                category = await ctx.guild.create_category(cat_name)
                created_categories.append(cat_name)
            except Exception as e:
                await ctx.send(f"‚ùå Erreur lors de la cr√©ation de la cat√©gorie {cat_name}: {e}")
                return

    # Cr√©er le canal de support s'il n'existe pas
    support_channel = discord.utils.get(ctx.guild.text_channels, name="ticket-support")
    if not support_channel:
        try:
            support_channel = await ctx.guild.create_text_channel("ticket-support")
            await ctx.send(f"‚úÖ Canal {support_channel.mention} cr√©√©.")
        except Exception as e:
            await ctx.send(f"‚ùå Erreur lors de la cr√©ation du canal ticket-support: {e}")
            return

    # Cr√©er le canal de logs s'il n'existe pas
    log_channel = discord.utils.get(ctx.guild.text_channels, id=LOG_TICKET_ID)
    if not log_channel:
        try:
            log_channel = await ctx.guild.create_text_channel("logs-tickets")
            await ctx.send(f"‚úÖ Canal de logs {log_channel.mention} cr√©√©. N'oublie pas de mettre √† jour la variable LOG_TICKET_ID dans le code avec l'ID: {log_channel.id}")
        except Exception as e:
            await ctx.send(f"‚ùå Erreur lors de la cr√©ation du canal de logs: {e}")

    # Cr√©er un message dans le canal de support
    if created_categories or not discord.utils.get(support_channel.history(limit=1)):
        view = TicketView()
        await support_channel.send("üìù **Choisis une cat√©gorie pour ton ticket :**", view=view)

    # Message de confirmation
    if created_categories:
        await ctx.send(f"‚úÖ Cat√©gories cr√©√©es: {', '.join(created_categories)}")
    else:
        await ctx.send("‚úÖ Toutes les cat√©gories existent d√©j√†.")

    await ctx.send("‚úÖ Configuration des tickets termin√©e.")

# Commande pour cr√©er les cat√©gories manquantes (d√©j√† d√©finie plus haut)
# @bot.command(name="setuptickets")  # Comment√© pour √©viter les doublons
async def setup_tickets_duplicate(ctx):
    """Cr√©e les cat√©gories et canaux n√©cessaires pour le syst√®me de tickets."""
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return

    # Cr√©er les cat√©gories si elles n'existent pas
    categories = ["üìå Candidatures", "‚ùì Aide", "üö´ D√©bannissement", "ü§ù Partenariats"]
    created_categories = []

    for cat_name in categories:
        category = discord.utils.get(ctx.guild.categories, name=cat_name)
        if not category:
            try:
                category = await ctx.guild.create_category(cat_name)
                created_categories.append(cat_name)
            except Exception as e:
                await ctx.send(f"‚ùå Erreur lors de la cr√©ation de la cat√©gorie {cat_name}: {e}")
                return

    # Cr√©er le canal de support s'il n'existe pas
    support_channel = discord.utils.get(ctx.guild.text_channels, name="ticket-support")
    if not support_channel:
        try:
            support_channel = await ctx.guild.create_text_channel("ticket-support")
            await ctx.send(f"‚úÖ Canal {support_channel.mention} cr√©√©.")
        except Exception as e:
            await ctx.send(f"‚ùå Erreur lors de la cr√©ation du canal ticket-support: {e}")
            return

    # Cr√©er le canal de logs s'il n'existe pas
    log_channel = discord.utils.get(ctx.guild.text_channels, id=LOG_TICKET_ID)
    if not log_channel:
        try:
            log_channel = await ctx.guild.create_text_channel("logs-tickets")
            await ctx.send(f"‚úÖ Canal de logs {log_channel.mention} cr√©√©. N'oublie pas de mettre √† jour la variable LOG_TICKET_ID dans le code avec l'ID: {log_channel.id}")
        except Exception as e:
            await ctx.send(f"‚ùå Erreur lors de la cr√©ation du canal de logs: {e}")

    # Cr√©er un message dans le canal de support
    if created_categories or not discord.utils.get(support_channel.history(limit=1)):
        view = TicketView()
        await support_channel.send("üìù **Choisis une cat√©gorie pour ton ticket :**", view=view)

    # Message de confirmation
    if created_categories:
        await ctx.send(f"‚úÖ Cat√©gories cr√©√©es: {', '.join(created_categories)}")
    else:
        await ctx.send("‚úÖ Toutes les cat√©gories existent d√©j√†.")

    await ctx.send("‚úÖ Configuration des tickets termin√©e.")



# Commandes pour le r√®glement
@bot.command(name="setupreglement")
async def setup_reglement(ctx, channel: discord.TextChannel = None):
    """Configure le canal o√π afficher le r√®glement.

    Utilisation:
    !setupreglement - Utilise le canal actuel
    !setupreglement #canal - Utilise le canal sp√©cifi√©
    """
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return

    # Si aucun canal n'est sp√©cifi√©, utiliser le canal actuel
    if not channel:
        channel = ctx.channel

    # Mettre √† jour le canal de r√®glement
    reglement["channel_id"] = channel.id

    # Sauvegarder les modifications
    save_reglement()

    await ctx.send(f"‚úÖ Le canal de r√®glement a √©t√© configur√© sur {channel.mention}.")

    # V√©rifier s'il y a d√©j√† des r√®gles √† afficher
    if reglement["rules"]:
        await update_reglement_message(ctx.guild)
    else:
        await ctx.send("‚ÑπÔ∏è Aucune r√®gle n'est d√©finie. Utilise `!addrule <r√®gle>` pour ajouter des r√®gles.")

@bot.command(name="addrule")
async def add_rule(ctx, *, rule_text: str):
    """Ajoute une r√®gle au r√®glement.

    Utilisation:
    !addrule Respecter les autres membres
    """
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return

    # V√©rifier si le canal de r√®glement est configur√©
    if not reglement["channel_id"]:
        await ctx.send("‚ùå Le canal de r√®glement n'est pas configur√©. Utilise d'abord `!setupreglement`.")
        return

    # Ajouter la r√®gle
    reglement["rules"].append(rule_text)

    # Sauvegarder les modifications
    save_reglement()

    await ctx.send(f"‚úÖ R√®gle ajout√©e: {rule_text}")

    # Mettre √† jour le message de r√®glement
    await update_reglement_message(ctx.guild)

@bot.command(name="removerule")
async def remove_rule(ctx, index: int):
    """Supprime une r√®gle du r√®glement par son num√©ro.

    Utilisation:
    !removerule 2 - Supprime la r√®gle num√©ro 2
    """
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return

    # V√©rifier si l'index est valide
    if index <= 0 or index > len(reglement["rules"]):
        await ctx.send(f"‚ùå Index invalide. Les r√®gles vont de 1 √† {len(reglement['rules'])}.")
        return

    # Supprimer la r√®gle (ajuster l'index car les listes commencent √† 0)
    removed_rule = reglement["rules"].pop(index - 1)

    # Sauvegarder les modifications
    save_reglement()

    await ctx.send(f"‚úÖ R√®gle supprim√©e: {removed_rule}")

    # Mettre √† jour le message de r√®glement
    await update_reglement_message(ctx.guild)

@bot.command(name="editrule")
async def edit_rule(ctx, index: int, *, new_text: str):
    """Modifie une r√®gle existante par son num√©ro.

    Utilisation:
    !editrule 2 Nouvelle formulation de la r√®gle
    """
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return

    # V√©rifier si l'index est valide
    if index <= 0 or index > len(reglement["rules"]):
        await ctx.send(f"‚ùå Index invalide. Les r√®gles vont de 1 √† {len(reglement['rules'])}.")
        return

    # Sauvegarder l'ancienne r√®gle pour l'afficher
    old_rule = reglement["rules"][index - 1]

    # Modifier la r√®gle
    reglement["rules"][index - 1] = new_text

    # Sauvegarder les modifications
    save_reglement()

    await ctx.send(f"‚úÖ R√®gle modifi√©e:\nAncienne: {old_rule}\nNouvelle: {new_text}")

    # Mettre √† jour le message de r√®glement
    await update_reglement_message(ctx.guild)

# Classe pour le bouton de v√©rification par r√®glement
class ReglementVerificationView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)  # Pas de timeout pour que le bouton reste actif

    @discord.ui.button(label="‚úÖ J'ai lu et j'accepte le r√®glement",
                      style=discord.ButtonStyle.success,
                      custom_id="reglement_verification_button")
    async def verify_button(self, button, interaction):
        print(f"=== Bouton de v√©rification r√®glement cliqu√© ===")
        print(f"Utilisateur: {interaction.user.name} (ID: {interaction.user.id})")

        try:
            # Attribuer le r√¥le membre (ID sp√©cifique: 1354904148570542273)
            print(f"Recherche du r√¥le membre (ID: 1354904148570542273) dans le serveur {interaction.guild.name}")
            role = discord.utils.get(interaction.guild.roles, id=1354904148570542273)

            if not role:
                print(f"‚ùå R√¥le membre introuvable dans le serveur {interaction.guild.name}")
                # Afficher tous les r√¥les disponibles pour le d√©bogage
                available_roles = [f"{r.name} (ID: {r.id})" for r in interaction.guild.roles]
                print(f"R√¥les disponibles: {', '.join(available_roles)}")

                await interaction.response.send_message(
                    "‚ùå Le r√¥le membre est introuvable. Contacte un administrateur.",
                    ephemeral=True
                )
                return

            print(f"‚úÖ R√¥le membre trouv√©: {role.name} (ID: {role.id})")

            # V√©rifier la hi√©rarchie des r√¥les
            bot_member = interaction.guild.get_member(interaction.client.user.id)
            if bot_member.top_role.position <= role.position:
                await interaction.response.send_message(
                    "‚ùå Je n'ai pas la permission d'attribuer ce r√¥le. Contacte un administrateur.",
                    ephemeral=True
                )
                return

            # Attribuer le r√¥le
            await interaction.user.add_roles(role)

            # Confirmer √† l'utilisateur
            await interaction.response.send_message(
                f"‚úÖ Merci d'avoir accept√© le r√®glement ! Tu as maintenant acc√®s au serveur.",
                ephemeral=True
            )

            # Log de l'action
            log_channel = interaction.guild.get_channel(LOG_CHANNEL_ID)
            if log_channel:
                await log_channel.send(
                    f"‚úÖ **V√©rification par r√®glement** : {interaction.user.mention} a accept√© le r√®glement et a re√ßu le r√¥le {role.mention}."
                )

        except discord.Forbidden:
            await interaction.response.send_message(
                "‚ùå Je n'ai pas la permission d'attribuer ce r√¥le. Contacte un administrateur.",
                ephemeral=True
            )
        except Exception as e:
            print(f"Erreur lors de la v√©rification par r√®glement: {e}")
            await interaction.response.send_message(
                "‚ùå Une erreur s'est produite. Contacte un administrateur.",
                ephemeral=True
            )

@bot.command(name="showrules")
async def show_rules(ctx):
    """Affiche la liste des r√®gles avec leurs num√©ros et un bouton pour accepter le r√®glement."""
    # Cette commande peut √™tre utilis√©e par tout le monde

    if not reglement["rules"]:
        await ctx.send("‚ÑπÔ∏è Aucune r√®gle n'est d√©finie.")
        return

    # Cr√©er un embed pour afficher les r√®gles
    embed = discord.Embed(
        title="üìú R√®glement du serveur",
        description="Voici les r√®gles √† respecter sur ce serveur:",
        color=discord.Color.blue()
    )

    # Ajouter une image de banni√®re en haut de l'embed
    if "banner_url" in reglement and reglement["banner_url"]:
        embed.set_image(url=reglement["banner_url"])
    else:
        # Utiliser une banni√®re par d√©faut si aucune n'est d√©finie
        embed.set_image(url="https://i.imgur.com/tJtAdNs.png")

    # Ajouter l'ic√¥ne du serveur comme thumbnail
    try:
        if ctx.guild.icon:
            embed.set_thumbnail(url=ctx.guild.icon.url)
    except Exception as e:
        print(f"Erreur lors de l'ajout de l'ic√¥ne du serveur: {e}")
        pass

    # Formater les r√®gles avec des s√©parateurs
    rules_text = format_rules_with_separators(reglement["rules"])

    # Si la description est trop longue pour un seul embed (limite de 4096 caract√®res)
    if len(rules_text) <= 4096:
        embed.description = f"Voici les r√®gles √† respecter sur ce serveur:\n\n{rules_text}"
    else:
        # Diviser les r√®gles en plusieurs embeds si n√©cessaire
        embed.description = "Voici les r√®gles √† respecter sur ce serveur:"

        # Utiliser la fonction utilitaire pour ajouter les r√®gles aux champs
        add_rules_to_embed_fields(embed, reglement["rules"])

    # Ajouter un pied de page
    embed.set_footer(text=f"R√®glement demand√© par {ctx.author.name}", icon_url=ctx.author.avatar.url if ctx.author.avatar else None)

    # Cr√©er la vue avec le bouton de v√©rification
    verification_view = ReglementVerificationView()

    # Envoyer l'embed avec le bouton
    await ctx.send(embed=embed, view=verification_view)

@bot.command(name="setbanner")
async def set_banner(ctx, url: str = None):
    """Change la banni√®re du r√®glement.

    Utilisation:
    !setbanner https://exemple.com/image.png - D√©finit une nouvelle banni√®re
    !setbanner - Affiche la banni√®re actuelle
    """
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return

    # Si aucune URL n'est fournie, afficher la banni√®re actuelle
    if not url:
        banner_url = reglement.get("banner_url", "https://i.imgur.com/tJtAdNs.png")
        embed = discord.Embed(
            title="Banni√®re actuelle du r√®glement",
            description=f"URL: {banner_url}",
            color=discord.Color.blue()
        )
        embed.set_image(url=banner_url)
        await ctx.send(embed=embed)
        return

    # V√©rifier si l'URL semble valide
    if not (url.startswith("http://") or url.startswith("https://")) or not any(url.endswith(ext) for ext in [".png", ".jpg", ".jpeg", ".gif", ".webp"]):
        await ctx.send("‚ùå L'URL doit commencer par http:// ou https:// et se terminer par une extension d'image (.png, .jpg, .jpeg, .gif, .webp).")
        return

    # Sauvegarder l'ancienne URL
    old_url = reglement["banner_url"]

    # Mettre √† jour l'URL de la banni√®re
    reglement["banner_url"] = url

    # Sauvegarder les modifications
    save_reglement()

    # Confirmer le changement
    embed = discord.Embed(
        title="‚úÖ Banni√®re du r√®glement mise √† jour",
        description="La nouvelle banni√®re sera utilis√©e pour tous les affichages du r√®glement.",
        color=discord.Color.green()
    )
    embed.set_image(url=url)
    await ctx.send(embed=embed)

    # Mettre √† jour le message de r√®glement
    if reglement["channel_id"] and reglement["rules"]:
        await update_reglement_message(ctx.guild)

@bot.command(name="resetrules")
async def reset_rules(ctx):
    """Supprime toutes les r√®gles du r√®glement."""
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå Tu n'as pas la permission d'utiliser cette commande.")
        return

    # Demander confirmation
    confirmation_message = await ctx.send("‚ö†Ô∏è √ätes-vous s√ªr de vouloir supprimer toutes les r√®gles ? R√©pondez par 'oui' pour confirmer.")

    def check(m):
        return m.author == ctx.author and m.channel == ctx.channel and m.content.lower() in ["oui", "non", "yes", "no"]

    try:
        # Attendre la r√©ponse pendant 30 secondes
        response = await bot.wait_for('message', check=check, timeout=30.0)

        if response.content.lower() in ["oui", "yes"]:
            # Supprimer toutes les r√®gles
            reglement["rules"] = []

            # Sauvegarder les modifications
            save_reglement()

            await ctx.send("‚úÖ Toutes les r√®gles ont √©t√© supprim√©es.")

            # Mettre √† jour le message de r√®glement (le supprimer s'il existe)
            if reglement["message_id"] and reglement["channel_id"]:
                channel = ctx.guild.get_channel(reglement["channel_id"])
                if channel:
                    try:
                        message = await channel.fetch_message(reglement["message_id"])
                        await message.delete()
                        reglement["message_id"] = None
                        save_reglement()
                    except:
                        pass
        else:
            await ctx.send("‚ùå Op√©ration annul√©e.")

    except asyncio.TimeoutError:
        await ctx.send("‚ùå Temps √©coul√©. Op√©ration annul√©e.")

# Fonction pour mettre √† jour le message de r√®glement
async def update_reglement_message(guild):
    # V√©rifier si le canal est configur√©
    if not reglement["channel_id"]:
        return False

    # R√©cup√©rer le canal
    channel = guild.get_channel(reglement["channel_id"])
    if not channel:
        print(f"Canal de r√®glement introuvable (ID: {reglement['channel_id']})")
        return False

    # Cr√©er l'embed pour le r√®glement
    embed = discord.Embed(
        title="üìú R√®glement du serveur",
        description="Voici les r√®gles √† respecter sur ce serveur:",
        color=discord.Color.blue()
    )

    # Ajouter une image de banni√®re en haut de l'embed
    if "banner_url" in reglement and reglement["banner_url"]:
        embed.set_image(url=reglement["banner_url"])
    else:
        # Utiliser une banni√®re par d√©faut si aucune n'est d√©finie
        embed.set_image(url="https://i.imgur.com/tJtAdNs.png")

    # Ajouter l'ic√¥ne du serveur comme thumbnail
    try:
        if guild.icon:
            embed.set_thumbnail(url=guild.icon.url)
    except Exception as e:
        print(f"Erreur lors de l'ajout de l'ic√¥ne du serveur: {e}")
        pass

    # Formater les r√®gles avec des s√©parateurs
    rules_text = format_rules_with_separators(reglement["rules"])

    # Si la description est trop longue pour un seul embed (limite de 4096 caract√®res)
    if len(rules_text) <= 4096:
        embed.description = f"Voici les r√®gles √† respecter sur ce serveur:\n\n{rules_text}"
    else:
        # Diviser les r√®gles en plusieurs embeds si n√©cessaire
        embed.description = "Voici les r√®gles √† respecter sur ce serveur:"

        # Utiliser la fonction utilitaire pour ajouter les r√®gles aux champs
        add_rules_to_embed_fields(embed, reglement["rules"])

    # Ajouter un pied de page
    embed.set_footer(text=f"Derni√®re mise √† jour: {discord.utils.utcnow().strftime('%d/%m/%Y %H:%M')}")

    try:
        # Cr√©er la vue avec le bouton de v√©rification
        verification_view = ReglementVerificationView()

        # Si un message existe d√©j√†, le mettre √† jour
        if reglement["message_id"]:
            try:
                message = await channel.fetch_message(reglement["message_id"])
                await message.edit(embed=embed, view=verification_view)
                return True
            except discord.NotFound:
                # Le message n'existe plus, en cr√©er un nouveau
                reglement["message_id"] = None

        # Cr√©er un nouveau message
        message = await channel.send(embed=embed, view=verification_view)
        reglement["message_id"] = message.id
        save_reglement()
        return True

    except Exception as e:
        print(f"Erreur lors de la mise √† jour du message de r√®glement: {e}")
        return False

# Fonction utilitaire pour formater les r√®gles avec des s√©parateurs
def format_rules_with_separators(rules):
    rules_text = ""
    separator = "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

    for i, rule in enumerate(rules, 1):
        # Ajouter un s√©parateur avant chaque r√®gle (sauf la premi√®re)
        if i > 1:
            rules_text += f"\n\n{separator}\n\n"

        # Ajouter la r√®gle avec son num√©ro
        rules_text += f"**R√®gle {i}**\n{rule}"

    # Ajouter un s√©parateur final
    rules_text += f"\n\n{separator}"

    return rules_text

# Fonction utilitaire pour diviser les r√®gles en champs d'embed
def add_rules_to_embed_fields(embed, rules):
    separator = "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    current_field = ""
    field_count = 1

    for i, rule in enumerate(rules, 1):
        # Cr√©er le texte de la r√®gle avec s√©parateur
        if i > 1:
            rule_prefix = f"\n{separator}\n\n**R√®gle {i}**\n"
        else:
            rule_prefix = f"**R√®gle {i}**\n"

        rule_text = f"{rule_prefix}{rule}\n\n"

        # Si l'ajout de cette r√®gle d√©passe la limite de caract√®res d'un champ (1024)
        if len(current_field) + len(rule_text) > 1024:
            # Ajouter le champ actuel √† l'embed
            embed.add_field(name=f"Partie {field_count}", value=current_field, inline=False)
            # Commencer un nouveau champ
            current_field = rule_text
            field_count += 1
        else:
            # Ajouter la r√®gle au champ actuel
            current_field += rule_text

    # Ajouter un s√©parateur final au dernier champ
    if current_field and not current_field.endswith(f"{separator}\n\n"):
        current_field += f"{separator}"

    # Ajouter le dernier champ s'il n'est pas vide
    if current_field:
        embed.add_field(name=f"Partie {field_count}", value=current_field, inline=False)

# Fonction pour mettre √† jour le message de r√®glement au d√©marrage
async def update_reglement_on_startup():
    # Charger le r√®glement depuis le fichier
    load_reglement()

    # Mettre √† jour le message de r√®glement si n√©cessaire
    if reglement["channel_id"] and reglement["rules"]:
        for guild in bot.guilds:
            await update_reglement_message(guild)

# Lancement du bot
keep_alive()
TOKEN = os.getenv('DISCORD_TOKEN')
bot.run(TOKEN)